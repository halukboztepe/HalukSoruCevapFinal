@{
    ViewData["Title"] = "Soru Cevap Portalı";
}

<div class="hero-section text-center py-5 mb-5">
    <h1 class="display-4 mb-3">Soru Cevap Portalı</h1>
    <p class="lead">Merak ettiğiniz soruları sorun, bilgi paylaşımına katkıda bulunun.</p>
    <button class="btn btn-primary btn-lg mt-3" id="createQuestionBtn">
        <i class="fas fa-plus"></i> Yeni Soru Sor
    </button>
</div>

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group">
                <input type="text" class="form-control" id="searchInput" placeholder="Sorularda ara...">
                <button class="btn btn-outline-primary" type="button" id="searchBtn">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4">
            <select class="form-select" id="sortSelect">
                <option value="newest">En Yeni</option>
                <option value="oldest">En Eski</option>    
            </select>
        </div>
    </div>

    <div id="questionsList" class="row">
        <!-- Questions will be loaded here -->
    </div>

    <div class="text-center mt-4" id="loadingSpinner" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Yükleniyor...</span>
        </div>
    </div>
</div>

<!-- Question Detail Page -->
<div id="questionDetailPage" class="container mt-4" style="display: none;">
    <div class="row">
        <div class="col-12">
            <button class="btn btn-outline-primary mb-4" id="backToList">
                <i class="fas fa-arrow-left"></i> Sorulara Dön
            </button>
        </div>
    </div>
    
    <div class="row">
        <div class="col-12">
            <div class="card question-detail-card mb-4">
                <div class="card-body">
                    <h2 class="card-title mb-3" id="detailQuestionTitle"></h2>
                    <p class="card-text" id="detailQuestionContent"></p>
                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div class="user-info">
                            <i class="fas fa-user-circle"></i>
                            <span id="detailQuestionUserName"></span>
                            <span class="text-muted ms-3">
                                <i class="fas fa-clock"></i> <span id="detailQuestionDate"></span>
                            </span>
                        </div>
                        <span class="badge bg-primary">
                            <i class="fas fa-comments"></i> <span id="detailAnswerCount">0</span> Cevap
                        </span>
                    </div>
                </div>
            </div>

            <!-- Answer Form -->
            <div class="card answer-form-card mb-4">
                <div class="card-body">
                    <h5 class="card-title mb-3">Cevap Yaz</h5>
                    <form id="answerForm">
                        <div class="mb-3">
                            <textarea class="form-control" id="answerContent" rows="4" required placeholder="Cevabınızı buraya yazın..."></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-paper-plane"></i> Cevabı Gönder
                        </button>
                    </form>
                </div>
            </div>

            <!-- Answers List -->
            <div class="card answers-list-card">
                <div class="card-body">
                    <h5 class="card-title mb-3">Cevaplar</h5>
                    <div id="answersList">
                        <!-- Answers will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Question Modal -->
<div class="modal fade" id="createQuestionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Yeni Soru Sor</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createQuestionForm">
                    <div class="mb-3">
                        <label for="title" class="form-label">Başlık</label>
                        <input type="text" class="form-control" id="title" name="title" required maxlength="500" placeholder="Sorunuzu kısaca özetleyin">
                    </div>
                    <div class="mb-3">
                        <label for="content" class="form-label">Detaylı Açıklama</label>
                        <textarea class="form-control" id="content" name="content" rows="5" required placeholder="Sorunuzu detaylı bir şekilde açıklayın"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="submitQuestion">Soruyu Gönder</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            let currentPage = 1;
            let isLoading = false;
            let searchTerm = '';
            let sortBy = 'newest';
            let currentQuestionId = null;

            function formatDate(dateString) {
                const date = new Date(dateString);
                const now = new Date();
                const diffTime = Math.abs(now - date);
                const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
                
                if (diffDays === 0) {
                    return 'Bugün';
                } else if (diffDays === 1) {
                    return 'Dün';
                } else if (diffDays < 7) {
                    return `${diffDays} gün önce`;
                } else {
                    return date.toLocaleDateString('tr-TR');
                }
            }

            function loadQuestions(append = false) {
                if (isLoading) return;
                isLoading = true;
                $('#loadingSpinner').show();

                const searchTerm = $('#searchInput').val();
                const sortBy = $('#sortSelect').val();

                $.ajax({
                    url: `${window.config.apiBaseUrl}/question?searchTerm=${encodeURIComponent(searchTerm)}&sortBy=${encodeURIComponent(sortBy)}`,
                    type: 'GET',
                    success: function(response) {
                        const questionsList = $('#questionsList');
                        if (!append) questionsList.empty();

                        if (response.message) {
                            questionsList.html(`<div class="col-12"><div class="alert alert-info">${response.message}</div></div>`);
                            return;
                        }

                        response.forEach(question => {
                            console.log('Creating card for question:', question); // Debug log
                            const questionCard = `
                                <div class="col-12 mb-4">
                                    <div class="card question-card">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <h5 class="card-title mb-3">${question.title}</h5>
                                                <span class="badge bg-primary">
                                                    <i class="fas fa-comments"></i> ${question.answerCount} Cevap
                                                </span>
                                            </div>
                                            <p class="card-text">${question.content}</p>
                                            <div class="card-footer bg-transparent border-top-0">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div class="user-info">
                                                        <i class="fas fa-user-circle"></i>
                                                        <span class="ms-2">${question.userName}</span>
                                                        <span class="text-muted ms-3">
                                                            <i class="fas fa-clock"></i> ${formatDate(question.createdDate)}
                                                        </span>
                                                    </div>
                                                    <a href="@Url.Action("QuestionDetail", "Home")/${question.id}" class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-comments"></i> Cevapları Gör
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                            questionsList.append(questionCard);
                        });
                    },
                    error: function(xhr, status, error) {
                        console.error('Error loading questions:', error); // Debug log
                        console.error('Status:', status);
                        console.error('Response:', xhr.responseText);
                        $('#questionsList').html('<div class="col-12"><div class="alert alert-danger">Sorular yüklenirken bir hata oluştu.</div></div>');
                    },
                    complete: function() {
                        isLoading = false;
                        $('#loadingSpinner').hide();
                    }
                });
            }

            function loadQuestionDetail(questionId) {
                console.log('Loading question detail for ID:', questionId);
                $.ajax({
                    url: `${window.config.apiBaseUrl}/question/${questionId}`,
                    type: 'GET',
                    success: function(question) {
                        console.log('Question data:', question);
                        $('#detailQuestionTitle').text(question.title);
                        $('#detailQuestionContent').text(question.content);
                        $('#detailQuestionUserName').text(question.userName);
                        $('#detailQuestionDate').text(formatDate(question.createdDate));
                        $('#detailAnswerCount').text(question.answerCount);
                        
                        loadAnswers(questionId);
                        
                        // Hide main container and show detail page with animation
                        $('.container').fadeOut(300, function() {
                            $('#questionDetailPage').fadeIn(300);
                        });
                    },
                    error: function(xhr, status, error) {
                        console.error('Error loading question:', error);
                        console.error('Status:', status);
                        console.error('Response:', xhr.responseText);
                        alert('Soru detayları yüklenirken bir hata oluştu.');
                    }
                });
            }

            function loadAnswers(questionId) {
                console.log('Loading answers for question ID:', questionId); // Debug log
                $.ajax({
                    url: `${window.config.apiBaseUrl}/answer/question/${questionId}`,
                    type: 'GET',
                    success: function(response) {
                        console.log('Answers data:', response); // Debug log
                        const answersList = $('#answersList');
                        answersList.empty();

                        if (response.message) {
                            answersList.html(`<div class="alert alert-info">${response.message}</div>`);
                            return;
                        }

                        response.forEach(answer => {
                            const answerCard = `
                                <div class="card mb-3 answer-card">
                                    <div class="card-body">
                                        <p class="card-text">${answer.content}</p>
                                        <div class="d-flex justify-content-between align-items-center mt-3">
                                            <div class="user-info">
                                                <i class="fas fa-user-circle"></i>
                                                <span class="ms-2">${answer.userName}</span>
                                                <span class="text-muted ms-3">
                                                    <i class="fas fa-clock"></i> ${formatDate(answer.createdDate)}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                            answersList.append(answerCard);
                        });
                    },
                    error: function(xhr, status, error) {
                        console.error('Error loading answers:', error); // Debug log
                        console.error('Status:', status);
                        console.error('Response:', xhr.responseText);
                        $('#answersList').html('<div class="alert alert-danger">Cevaplar yüklenirken bir hata oluştu.</div>');
                    }
                });
            }

            // Show question detail
            $(document).on('click', '.view-answers', function() {
                const questionId = $(this).data('id');
                console.log('Question ID:', questionId); // Debug log
                currentQuestionId = questionId;
                loadQuestionDetail(questionId);
            });

            // Back to list
            $('#backToList').click(function() {
                console.log('Back to list clicked');
                // Hide detail page and show main container with animation
                $('#questionDetailPage').fadeOut(300, function() {
                    $('.container').fadeIn(300);
                });
            });

            // Submit answer
            $('#answerForm').submit(function(e) {
                e.preventDefault();
                
                const token = localStorage.getItem('token');
                if (!token) {
                    window.location.href = '@Url.Action("Login", "Home")';
                    return;
                }

                const answerData = {
                    questionId: currentQuestionId,
                    content: $('#answerContent').val()
                };

                $.ajax({
                    url: `${window.config.apiBaseUrl}/answer`,
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    data: JSON.stringify(answerData),
                    success: function(response) {
                        $('#answerContent').val('');
                        loadAnswers(currentQuestionId);
                        loadQuestionDetail(currentQuestionId);
                    },
                    error: function(xhr) {
                        if (xhr.status === 401) {
                            window.location.href = '@Url.Action("Login", "Home")';
                        } else {
                            alert('Cevap gönderilirken bir hata oluştu.');
                        }
                    }
                });
            });

            // Show create question modal
            $('#createQuestionBtn').click(function() {
                const token = localStorage.getItem('token');
                if (!token) {
                    window.location.href = '@Url.Action("Login", "Home")';
                    return;
                }
                $('#createQuestionModal').modal('show');
            });

            // Submit question
            $('#submitQuestion').click(function() {
                const token = localStorage.getItem('token');
                if (!token) {
                    window.location.href = '@Url.Action("Login", "Home")';
                    return;
                }

                const questionData = {
                    title: $('#title').val(),
                    content: $('#content').val()
                };

                $.ajax({
                    url: `${window.config.apiBaseUrl}/question`,
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    data: JSON.stringify(questionData),
                    success: function(response) {
                        $('#createQuestionModal').modal('hide');
                        $('#createQuestionForm')[0].reset();
                        loadQuestions();
                    },
                    error: function(xhr) {
                        if (xhr.status === 401) {
                            window.location.href = '@Url.Action("Login", "Home")';
                        } else {
                            alert('Soru eklenirken bir hata oluştu.');
                        }
                    }
                });
            });

            // Search functionality
            $('#searchBtn').click(function() {
                searchTerm = $('#searchInput').val().toLowerCase();
                loadQuestions();
            });

            $('#searchInput').on('keypress', function(e) {
                if (e.which === 13) {
                    searchTerm = $(this).val().toLowerCase();
                    loadQuestions();
                }
            });

            // Sort functionality
            $('#sortSelect').change(function() {
                sortBy = $(this).val();
                loadQuestions();
            });

            // Initial load
            loadQuestions();
        });
    </script>
}
